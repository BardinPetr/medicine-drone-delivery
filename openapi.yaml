openapi: 3.0.1
info:
  title: ITMO Lab1 API
  version: 0.1.0
servers:
- url: http://0.0.0.0:8080
- url: http://meddelivery.bardinpetr.ru
security:
- bearerAuth: []
paths:
  /api/warehouseproducts/{id}:
    put:
      tags:
      - warehouse-products-controller
      operationId: update
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WarehouseProductsDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WarehouseProductsDto"
  /api/warehouse/{id}:
    get:
      tags:
      - warehouse-controller
      operationId: get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WarehouseDto"
    put:
      tags:
      - warehouse-controller
      operationId: update
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WarehouseDto"
        required: true
      responses:
        "200":
          description: OK
    delete:
      tags:
      - warehouse-controller
      operationId: remove
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /api/typeofdrone/{id}:
    get:
      tags:
      - type-of-drone-controller
      operationId: get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TypeOfDroneDto"
    put:
      tags:
      - type-of-drone-controller
      operationId: update
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TypeOfDroneDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TypeOfDroneDto"
    delete:
      tags:
      - type-of-drone-controller
      operationId: remove
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /api/route/{id}:
    get:
      tags:
      - route-controller
      operationId: get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RouteDto"
    put:
      tags:
      - route-controller
      operationId: update
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RouteDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RouteDto"
    delete:
      tags:
      - route-controller
      operationId: remove
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: boolean
  /api/requestentry/{id}:
    get:
      tags:
      - request-entry-controller
      operationId: get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestEntryDto"
    put:
      tags:
      - request-entry-controller
      operationId: update
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestEntryDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestEntryDto"
    delete:
      tags:
      - request-entry-controller
      operationId: remove
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: boolean
  /api/request/{id}:
    get:
      tags:
      - request-controller
      operationId: get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestDto"
    put:
      tags:
      - request-controller
      operationId: update
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestDto"
    delete:
      tags:
      - request-controller
      operationId: remove
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: boolean
  /api/producttype/{id}:
    get:
      tags:
      - product-type-controller
      operationId: get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductTypeDto"
    put:
      tags:
      - product-type-controller
      operationId: update
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductTypeDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductTypeDto"
    delete:
      tags:
      - product-type-controller
      operationId: remove
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: boolean
  /api/noflightzone/{id}:
    get:
      tags:
      - no-flight-zone-controller
      operationId: get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoFlightZoneDto"
    put:
      tags:
      - no-flight-zone-controller
      operationId: update
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NoFlightZoneDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoFlightZoneDto"
    delete:
      tags:
      - no-flight-zone-controller
      operationId: remove
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: boolean
  /api/medicalfacility/{id}:
    get:
      tags:
      - medical-facility-controller
      operationId: get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MedicalFacilityDto"
    put:
      tags:
      - medical-facility-controller
      operationId: update
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MedicalFacilityDto"
        required: true
      responses:
        "200":
          description: OK
    delete:
      tags:
      - medical-facility-controller
      operationId: remove
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /api/flighttask/{id}:
    get:
      tags:
      - flight-task-controller
      operationId: get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FlightTaskDto"
    put:
      tags:
      - flight-task-controller
      operationId: update
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FlightTaskDto"
        required: true
      responses:
        "200":
          description: OK
    delete:
      tags:
      - flight-task-controller
      operationId: remove
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
  /api/drone/{id}:
    get:
      tags:
      - drone-controller
      operationId: get
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DroneDto"
    put:
      tags:
      - drone-controller
      operationId: update
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DroneDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DroneDto"
    delete:
      tags:
      - drone-controller
      operationId: remove
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: boolean
  /auth/register:
    post:
      tags:
      - login-controller
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRsDto"
  /auth/login:
    post:
      tags:
      - login-controller
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRsDto"
  /api/warehouseproducts:
    get:
      tags:
      - warehouse-products-controller
      operationId: list
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      - name: filter
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageWarehouseProductsDto"
    post:
      tags:
      - warehouse-products-controller
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WarehouseProductsDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WarehouseProductsDto"
  /api/warehouse:
    get:
      tags:
      - warehouse-controller
      operationId: list
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      - name: filter
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageWarehouseDto"
    post:
      tags:
      - warehouse-controller
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WarehouseDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WarehouseDto"
  /api/typeofdrone:
    get:
      tags:
      - type-of-drone-controller
      operationId: list
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      - name: filter
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageTypeOfDroneDto"
    post:
      tags:
      - type-of-drone-controller
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TypeOfDroneDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TypeOfDroneDto"
  /api/route:
    get:
      tags:
      - route-controller
      operationId: list
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      - name: filter
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageRouteDto"
    post:
      tags:
      - route-controller
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RouteDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RouteDto"
  /api/requestentry:
    get:
      tags:
      - request-entry-controller
      operationId: list
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      - name: filter
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageRequestEntryDto"
    post:
      tags:
      - request-entry-controller
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestEntryDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestEntryDto"
  /api/request:
    get:
      tags:
      - request-controller
      operationId: list
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      - name: filter
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageRequestDto"
    post:
      tags:
      - request-controller
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RequestDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RequestDto"
  /api/producttype:
    get:
      tags:
      - product-type-controller
      operationId: list
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      - name: filter
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageProductTypeDto"
    post:
      tags:
      - product-type-controller
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductTypeDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductTypeDto"
  /api/noflightzone:
    get:
      tags:
      - no-flight-zone-controller
      operationId: list
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      - name: filter
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageNoFlightZoneDto"
    post:
      tags:
      - no-flight-zone-controller
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NoFlightZoneDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoFlightZoneDto"
  /api/medicalfacility:
    get:
      tags:
      - medical-facility-controller
      operationId: list
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      - name: filter
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageMedicalFacilityDto"
    post:
      tags:
      - medical-facility-controller
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MedicalFacilityDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MedicalFacilityDto"
  /api/flighttask:
    get:
      tags:
      - flight-task-controller
      operationId: list
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      - name: filter
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageFlightTaskDto"
    post:
      tags:
      - flight-task-controller
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FlightTaskDto"
        required: true
      responses:
        "200":
          description: OK
  /api/drone:
    get:
      tags:
      - drone-controller
      operationId: list
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      - name: filter
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageDroneDto"
    post:
      tags:
      - drone-controller
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DroneDto"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DroneDto"
  /api/drone/{id}/send:
    post:
      tags:
      - drone-controller
      operationId: sendDrone
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: boolean
  /api/warehouse/count:
    get:
      tags:
      - warehouse-controller
      operationId: count
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
  /api/warehouse/all:
    get:
      tags:
      - warehouse-controller
      operationId: listAll
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/WarehouseDto"
  /api/user:
    get:
      tags:
      - user-controller
      operationId: list
      parameters:
      - name: pageable
        in: query
        required: true
        schema:
          $ref: "#/components/schemas/Pageable"
      - name: filter
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageUserDto"
  /api/user/self:
    get:
      tags:
      - user-controller
      operationId: get
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  /api/user/all:
    get:
      tags:
      - user-controller
      operationId: listAll
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDto"
  /api/typeofdrone/count:
    get:
      tags:
      - type-of-drone-controller
      operationId: count
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
  /api/typeofdrone/all:
    get:
      tags:
      - type-of-drone-controller
      operationId: listAll
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TypeOfDroneDto"
  /api/route/count:
    get:
      tags:
      - route-controller
      operationId: count
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
  /api/route/all:
    get:
      tags:
      - route-controller
      operationId: listAll
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RouteDto"
  /api/requestentry/count:
    get:
      tags:
      - request-entry-controller
      operationId: count
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
  /api/requestentry/all:
    get:
      tags:
      - request-entry-controller
      operationId: listAll
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RequestEntryDto"
  /api/request/count:
    get:
      tags:
      - request-controller
      operationId: count
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
  /api/request/all:
    get:
      tags:
      - request-controller
      operationId: listAll
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RequestDto"
  /api/producttype/count:
    get:
      tags:
      - product-type-controller
      operationId: count
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
  /api/producttype/all:
    get:
      tags:
      - product-type-controller
      operationId: listAll
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProductTypeDto"
  /api/noflightzone/count:
    get:
      tags:
      - no-flight-zone-controller
      operationId: count
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
  /api/noflightzone/all:
    get:
      tags:
      - no-flight-zone-controller
      operationId: listAll
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/NoFlightZoneDto"
  /api/medicalfacility/count:
    get:
      tags:
      - medical-facility-controller
      operationId: count
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
  /api/medicalfacility/all:
    get:
      tags:
      - medical-facility-controller
      operationId: listAll
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MedicalFacilityDto"
  /api/map/warehouses.geojson:
    get:
      tags:
      - map-controller
      operationId: warehouses
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /api/map/noFlightZones.geojson:
    get:
      tags:
      - map-controller
      operationId: noZones
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /api/map/medicalFacility.geojson:
    get:
      tags:
      - map-controller
      operationId: medicalFacilitys
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /api/map/drones.geojson:
    get:
      tags:
      - map-controller
      operationId: drones
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /api/flighttask/count:
    get:
      tags:
      - flight-task-controller
      operationId: count
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
  /api/flighttask/all:
    get:
      tags:
      - flight-task-controller
      operationId: listAll
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/FlightTaskDto"
  /api/drone/count:
    get:
      tags:
      - drone-controller
      operationId: count
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
  /api/drone/all:
    get:
      tags:
      - drone-controller
      operationId: listAll
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/DroneDto"
components:
  schemas:
    ProductTypeDto:
      type: object
      properties:
        type:
          type: string
        id:
          type: integer
          format: int64
    WarehouseDto:
      type: object
      properties:
        name:
          type: string
        locationLat:
          type: number
          format: double
        locationLon:
          type: number
          format: double
        id:
          type: integer
          format: int64
    WarehouseProductsDto:
      required:
      - idProductId
      - idWarehouseId
      type: object
      properties:
        idProductId:
          type: integer
          format: int64
        idWarehouseId:
          type: integer
          format: int64
        product:
          $ref: "#/components/schemas/ProductTypeDto"
        warehouse:
          $ref: "#/components/schemas/WarehouseDto"
        quantity:
          type: integer
          format: int32
    TypeOfDroneDto:
      type: object
      properties:
        name:
          type: string
        maxWeight:
          type: integer
          format: int64
        speed:
          type: number
          format: double
        id:
          type: integer
          format: int64
    RouteDto:
      required:
      - routePoints
      type: object
      properties:
        warehouseId:
          type: integer
          format: int64
        medicalFacilityId:
          type: integer
          format: int64
        routePoints:
          type: array
          items:
            $ref: "#/components/schemas/RoutePointDto"
        id:
          type: integer
          format: int64
    RoutePointDto:
      required:
      - idPointNumber
      - idRouteId
      type: object
      properties:
        idRouteId:
          type: integer
          format: int64
        idPointNumber:
          type: integer
          format: int32
        locationLat:
          type: number
          format: double
        locationLon:
          type: number
          format: double
    RequestEntryDto:
      required:
      - fulfilledQuantity
      type: object
      properties:
        requestId:
          type: integer
          format: int64
        productTypeType:
          type: string
        quantity:
          type: integer
          format: int32
        fulfilledQuantity:
          type: integer
          format: int32
        id:
          type: integer
          format: int64
    RequestDto:
      required:
      - requestEntries
      type: object
      properties:
        userUsername:
          type: string
        status:
          type: string
          enum:
          - QUEUED
          - READY
          - PACKING
          - IN_PROGRESS
          - COMPLETED
        medicalFacilityName:
          type: string
        requestEntries:
          type: array
          items:
            $ref: "#/components/schemas/RequestEntryDto"
        id:
          type: integer
          format: int64
    NoFlightZoneDto:
      type: object
      properties:
        radius:
          type: number
          format: float
        centerLat:
          type: number
          format: double
        centerLon:
          type: number
          format: double
        id:
          type: integer
          format: int64
    MedicalFacilityDto:
      type: object
      properties:
        name:
          type: string
        responsibleUser:
          $ref: "#/components/schemas/UserDto"
        locationLat:
          type: number
          format: double
        locationLon:
          type: number
          format: double
        id:
          type: integer
          format: int64
    UserDto:
      required:
      - role
      - username
      type: object
      properties:
        username:
          type: string
        role:
          type: string
          enum:
          - USER
          - ADMIN
          - MEDIC
          - WAREHOUSE
        id:
          type: integer
          format: int64
    FlightTaskDto:
      type: object
      properties:
        request:
          $ref: "#/components/schemas/RequestDto"
        status:
          type: string
          enum:
          - QUEUED
          - READY
          - PACKING
          - IN_PROGRESS
          - COMPLETED
        productType:
          $ref: "#/components/schemas/ProductTypeDto"
        warehouse:
          $ref: "#/components/schemas/WarehouseDto"
        medicalFacility:
          $ref: "#/components/schemas/MedicalFacilityDto"
        quantity:
          type: integer
          format: int32
        route:
          $ref: "#/components/schemas/RouteDto"
        timestamp:
          type: string
          format: date-time
        id:
          type: integer
          format: int64
    DroneDto:
      type: object
      properties:
        typeOfDrone:
          $ref: "#/components/schemas/TypeOfDroneDto"
        status:
          type: string
          enum:
          - IDLE
          - READY
          - FLYING_TO
          - FLYING_FROM
        locationLat:
          type: number
          format: double
        locationLon:
          type: number
          format: double
        flightTask:
          $ref: "#/components/schemas/FlightTaskDto"
        id:
          type: integer
          format: int64
    RegisterDto:
      required:
      - password
      - role
      - username
      type: object
      properties:
        username:
          type: string
        password:
          maxLength: 255
          minLength: 8
          type: string
        role:
          type: string
          enum:
          - USER
          - ADMIN
          - MEDIC
          - WAREHOUSE
    UserRsDto:
      required:
      - role
      - token
      - username
      type: object
      properties:
        username:
          type: string
        role:
          type: string
          enum:
          - USER
          - ADMIN
          - MEDIC
          - WAREHOUSE
        token:
          type: string
    LoginDto:
      required:
      - password
      - username
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    Pageable:
      type: object
      properties:
        page:
          minimum: 0
          type: integer
          format: int32
        size:
          minimum: 1
          type: integer
          format: int32
        sort:
          type: array
          items:
            type: string
    PageWarehouseProductsDto:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        pageable:
          $ref: "#/components/schemas/PageableObject"
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/WarehouseProductsDto"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        paged:
          type: boolean
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
        unpaged:
          type: boolean
        offset:
          type: integer
          format: int64
        sort:
          $ref: "#/components/schemas/SortObject"
    SortObject:
      type: object
      properties:
        sorted:
          type: boolean
        unsorted:
          type: boolean
        empty:
          type: boolean
    PageWarehouseDto:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        pageable:
          $ref: "#/components/schemas/PageableObject"
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/WarehouseDto"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    PageUserDto:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        pageable:
          $ref: "#/components/schemas/PageableObject"
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/UserDto"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    User:
      required:
      - passwordHash
      - role
      - username
      type: object
      properties:
        username:
          type: string
        passwordHash:
          type: string
        role:
          type: string
          enum:
          - USER
          - ADMIN
          - MEDIC
          - WAREHOUSE
        id:
          type: integer
          format: int64
    PageTypeOfDroneDto:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        pageable:
          $ref: "#/components/schemas/PageableObject"
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/TypeOfDroneDto"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    PageRouteDto:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        pageable:
          $ref: "#/components/schemas/PageableObject"
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/RouteDto"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    PageRequestEntryDto:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        pageable:
          $ref: "#/components/schemas/PageableObject"
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/RequestEntryDto"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    PageRequestDto:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        pageable:
          $ref: "#/components/schemas/PageableObject"
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/RequestDto"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    PageProductTypeDto:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        pageable:
          $ref: "#/components/schemas/PageableObject"
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/ProductTypeDto"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    PageNoFlightZoneDto:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        pageable:
          $ref: "#/components/schemas/PageableObject"
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/NoFlightZoneDto"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    PageMedicalFacilityDto:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        pageable:
          $ref: "#/components/schemas/PageableObject"
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/MedicalFacilityDto"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    PageFlightTaskDto:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        pageable:
          $ref: "#/components/schemas/PageableObject"
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/FlightTaskDto"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    PageDroneDto:
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
        pageable:
          $ref: "#/components/schemas/PageableObject"
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/DroneDto"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
