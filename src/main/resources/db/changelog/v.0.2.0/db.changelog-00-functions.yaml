databaseChangeLog:
  - changeSet:
      id: add-function-max-mfcost
      author: Bardin Petr
      objectQuotingStrategy: QUOTE_ONLY_RESERVED_WORDS
      changes:
        - createProcedure:
            procedureName: get_product_with_max_manufacture_cost
            procedureBody: |
              DROP FUNCTION IF EXISTS get_product_with_max_manufacture_cost;
              CREATE FUNCTION get_product_with_max_manufacture_cost()
                  RETURNS SETOF product AS
              $$
              BEGIN
                  RETURN QUERY
                      SELECT p.*
                      FROM product p
                      ORDER BY p.manufacture_cost DESC
                      LIMIT 1;
              END;
              $$ LANGUAGE plpgsql;
      rollback:
        - dropProcedure:
            procedureName: get_product_with_max_manufacture_cost
  - changeSet:
      id: add-function-less-owner
      author: Bardin Petr
      objectQuotingStrategy: QUOTE_ONLY_RESERVED_WORDS
      changes:
        - createProcedure:
            procedureName: count_products_less_compared_owner
            procedureBody: |
              DROP FUNCTION IF EXISTS count_products_less_compared_owner;
              CREATE FUNCTION count_products_less_compared_owner(target_pid BIGINT)
                  RETURNS BIGINT AS
              $$
              DECLARE
                  owner_name TEXT;
              BEGIN
                  SELECT name
                  INTO owner_name
                  FROM person
                  WHERE id = target_pid;

                  RETURN (SELECT COUNT(*)
                          FROM product p
                                   JOIN person own ON p.person_id = own.id
                          WHERE own.name < owner_name);
              END;
              $$ LANGUAGE plpgsql;
      rollback:
        - dropProcedure:
            procedureName: count_products_less_compared_owner
  - changeSet:
      id: add-function-greater-pn
      author: Bardin Petr
      objectQuotingStrategy: QUOTE_ONLY_RESERVED_WORDS
      changes:
        - createProcedure:
            procedureName: get_products_with_part_number_greater
            procedureBody: |
              DROP FUNCTION IF EXISTS get_products_with_part_number_greater;
              CREATE FUNCTION get_products_with_part_number_greater(target_pn TEXT)
                  RETURNS SETOF product AS
              $$
              BEGIN
                  RETURN QUERY
                      SELECT p.*
                      FROM product p
                      WHERE p.part_number > target_pn;
              END;
              $$ LANGUAGE plpgsql;
      rollback:
        - dropProcedure:
            procedureName: get_products_with_part_number_greater
  - changeSet:
      id: add-function-in-unit
      author: Bardin Petr
      objectQuotingStrategy: QUOTE_ONLY_RESERVED_WORDS
      changes:
        - createProcedure:
            procedureName: get_products_in_unit_of_measure_arr
            procedureBody: |
              DROP FUNCTION IF EXISTS get_products_in_unit_of_measure_arr;
              CREATE FUNCTION get_products_in_unit_of_measure_arr(units TEXT[])
                  RETURNS SETOF product AS
              $$
              BEGIN
                  RETURN QUERY
                      SELECT p.*
                      FROM product p
                      WHERE p.unit_of_measure = ANY (units);
              END;
              $$ LANGUAGE plpgsql;
      rollback:
        - dropProcedure:
            procedureName: get_products_in_unit_of_measure_arr
  - changeSet:
      id: add-function-decrease-price
      author: Bardin Petr
      objectQuotingStrategy: QUOTE_ONLY_RESERVED_WORDS
      changes:
        - createProcedure:
            procedureName: decrease_all_product_prices_by
            procedureBody: |
              DROP PROCEDURE IF EXISTS decrease_all_product_prices_by;
              CREATE PROCEDURE decrease_all_product_prices_by(percent DOUBLE PRECISION) AS
              $$
              BEGIN
                  IF percent <= 0 OR percent >= 1 THEN
                      RAISE EXCEPTION 'Percent must be between 0 and 1';
                  END IF;
                  UPDATE product
                  SET price = price * (1 - percent);
              END;
              $$ LANGUAGE plpgsql;
      rollback:
        - dropProcedure:
            procedureName: decrease_all_product_prices_by